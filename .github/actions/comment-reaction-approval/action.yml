name: 'Comment Reaction Approval'
description: 'Creates a comment, waits for reaction from authorized users (writers/admins), and deletes on approval or failure'
inputs:
  github-token:
    description: 'GitHub token for API requests'
    required: true
  issue-number:
    description: 'GitHub issue or PR number'
    required: true
  comment-body:
    description: 'The body of the comment'
    default: 'Please react with :+1: to approve or :-1: to reject.'
    required: false
  hidden-comment-id:
    description: 'A unique identifier for finding the comment'
    required: true

runs:
  using: "composite"
  steps:
    - name: Check for existing comment by hidden ID
      id: check-comment
      run: |
        COMMENTS=$(curl -s -H "Authorization: Bearer ${{ inputs.github-token }}" \
          "https://api.github.com/repos/${{ github.repository }}/issues/${{ inputs.issue-number }}/comments")

        # Validate if the response is a valid JSON array
        if echo "$COMMENTS" | jq -e 'type == "array"' > /dev/null; then
          EXISTING_COMMENT_ID=$(echo "$COMMENTS" | jq -r '.[] | select(.body | contains("${{ inputs.hidden-comment-id }}")) | .id')

          if [ -n "$EXISTING_COMMENT_ID" ] && [ "$EXISTING_COMMENT_ID" != "null" ]; then
            echo "Existing comment found with ID: $EXISTING_COMMENT_ID"
            echo "comment_id=$EXISTING_COMMENT_ID" >> $GITHUB_ENV
          else
            echo "No existing comment found."
            echo "comment_id=" >> $GITHUB_ENV
          fi
        else
          echo "Error: GitHub API did not return a valid JSON array."
          echo "$COMMENTS"
          echo "comment_id=" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Delete existing comment if found
      if: env.comment_id != ''
      run: |
        curl -X DELETE -H "Authorization: Bearer ${{ inputs.github-token }}" \
          "https://api.github.com/repos/${{ github.repository }}/issues/comments/${{ env.comment_id }}"
        echo "Deleted existing comment ID: ${{ env.comment_id }}"
      shell: bash

    - name: Create new comment
      id: create-comment
      uses: peter-evans/create-or-update-comment@v4
      with:
        issue-number: ${{ inputs.issue-number }}
        body: |
          ${{ inputs.comment-body }}

          <!-- comment-reaction-approval#${{ inputs.hidden-comment-id }} -->
        reactions: "+1"

    - name: Wait for reaction
      id: wait-reaction
      run: |
        COMMENT_ID=${{ env.comment_id }}
        END_TIME=$((SECONDS+600))  # 10-minute timeout
        while [ $SECONDS -lt $END_TIME ]; do
          REACTION_COUNT=$(curl -s -H "Authorization: Bearer ${{ inputs.github-token }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/comments/${COMMENT_ID}/reactions" \
            | jq '[.[] | select(.content == "+1")] | length')

          echo "Current reaction count: $REACTION_COUNT"

          if [ "$REACTION_COUNT" -gt 0 ]; then
            echo "Reaction received, proceeding."
            echo "reaction_received=true" >> $GITHUB_ENV
            exit 0
          fi

          sleep 30  # Check every 30 seconds
        done

        echo "No reaction received within the timeout period."
        echo "reaction_received=false" >> $GITHUB_ENV
        exit 1
      shell: bash

    - name: Verify if reaction is from repo admin/writer
      if: env.reaction_received == 'true'
      id: verify-user
      run: |
        COMMENT_ID=${{ env.comment_id }}
        REACTIONS=$(curl -s -H "Authorization: Bearer ${{ inputs.github-token }}" \
          "https://api.github.com/repos/${{ github.repository }}/issues/comments/${COMMENT_ID}/reactions")

        # Get repository collaborators (with write/admin permissions)
        COLLABORATORS=$(curl -s -H "Authorization: Bearer ${{ inputs.github-token }}" \
          "https://api.github.com/repos/${{ github.repository }}/collaborators?permission=write" | jq -r '.[].login')

        COLLABORATORS+=" $(curl -s -H "Authorization: Bearer ${{ inputs.github-token }}" \
          "https://api.github.com/repos/${{ github.repository }}/collaborators?permission=admin" | jq -r '.[].login')"

        APPROVED="false"
        for user in $COLLABORATORS; do
          if echo "$REACTIONS" | jq -e --arg u "$user" '.[] | select(.user.login == $u)' > /dev/null; then
            echo "Reaction from authorized user $user detected!"
            APPROVED="true"
            break
          fi
        done

        if [ "$APPROVED" == "true" ]; then
          echo "Reaction approved by an authorized user."
          echo "approval_status=approved" >> $GITHUB_ENV
          exit 0
        else
          echo "No authorized user reacted. Failing job."
          echo "approval_status=rejected" >> $GITHUB_ENV
          exit 1
        fi
      shell: bash

    - name: Delete comment after reaction (approval or failure)
      if: always()
      run: |
        curl -X DELETE -H "Authorization: Bearer ${{ inputs.github-token }}" \
          "https://api.github.com/repos/${{ github.repository }}/issues/comments/${{ env.comment_id }}"
        echo "Deleted comment after completion (approval or failure)."
      shell: bash

    - name: Final status
      if: env.approval_status != 'approved'
      run: |
        echo "Approval failed or no authorized user reacted."
        exit 1
      shell: bash
