name: 'Comment Reaction Approval'
description: 'Creates a comment, waits for reaction from authorized users (writers/admins), and deletes on approval or failure'
inputs:
  github-token:
    description: 'GitHub token for API requests'
    required: true
  issue-number:
    description: 'GitHub issue or PR number'
    required: true
  comment-body:
    description: 'The body of the comment'
    default: 'Please react with :+1: to approve or :-1: to reject.'
    required: false
  hidden-comment-id:
    description: 'A unique identifier for finding the comment'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Find Comment
      uses: peter-evans/find-comment@v2
      id: fc
      with:
        issue-number: ${{ inputs.issue-number }}
        comment-author: 'github-actions[bot]'
        body-includes: 'comment-reaction-approval#${{ inputs.hidden-comment-id }}'

    - name: Delete Existing Comment
      if: steps.fc.outputs.comment-id != ''
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.deleteComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            comment_id: ${{ steps.fc.outputs.comment-id }}
          })

    - name: Create new comment
      id: cc
      uses: peter-evans/create-or-update-comment@v4
      with:
        issue-number: ${{ inputs.issue-number }}
        body: |
          ${{ inputs.comment-body }}

          <!-- comment-reaction-approval#${{ inputs.hidden-comment-id }} -->
        reactions: "+1"

    - name: Wait for reaction
      id: wait-reaction
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const commentId = '${{ steps.cc.outputs.comment-id }}';
          const endTime = Date.now() + 1800000;  // 30-minute timeout
          
          async function checkReaction() {
            while (Date.now() < endTime) {
              const { data: reactions } = await github.rest.reactions.listForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: commentId
              });
              
              const { data: collaborators } = await github.rest.repos.listCollaborators({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              
              const allowedRoles = ['admin', 'write'];
              const validUsers = collaborators.filter(user => allowedRoles.includes(user.permissions.admin || user.permissions.push));
              
              const reactionCount = reactions.filter(reaction => 
                reaction.content === '+1' && 
                validUsers.some(user => user.login === reaction.user.login)
              ).length;
              
              console.log(`Current reaction count from admins/writers: ${reactionCount}`);
              
              if (reactionCount > 0) {
                console.log('Reaction received from an admin or writer, proceeding.');
                core.exportVariable('reaction_received', 'true');
                return;
              }
              
              await new Promise(resolve => setTimeout(resolve, 30000)); // Check every 30 seconds
            }
            
            console.log('No reaction received from an admin or writer within the timeout period.');
            core.exportVariable('reaction_received', 'false');
            core.setFailed('No reaction received from an admin or writer within the timeout period.');
          }
          
          await checkReaction();

    - name: Delete Existing Comment
      if: steps.cc.outputs.comment-id != '' && always()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.deleteComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            comment_id: ${{ steps.cc.outputs.comment-id }}
          })
