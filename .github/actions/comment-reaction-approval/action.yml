name: 'Comment Reaction Approval'
description: 'Advanced comment approval workflow with flexible authorization and reaction handling'
inputs:
  github-token:
    description: 'GitHub token for API requests'
    required: true
  issue-number:
    description: 'GitHub issue or PR number'
    required: true
  comment-body:
    description: 'The body of the comment'
    required: false
    default: 'Please react with :+1: to approve, :-1: to reject, or :eyes: to pause timeout.'
  comment-id:
    description: 'A unique identifier for finding the comment'
    required: true
  wait-timeout-seconds:
    description: 'Time to wait for a reaction in seconds'
    required: false
    default: '1800'
  check-interval-seconds:
    description: 'Interval between reaction checks'
    required: false
    default: '30'
  required-approvals:
    description: 'Number of required approvals to mark as approved'
    required: false
    default: '1'
  required-rejections:
    description: 'Number of required rejections to mark as rejected'
    required: false
    default: '1'
  authorized-roles:
    description: 'Comma-separated list of allowed roles (admin,maintain,push,triage,pull)'
    required: false
    default: 'admin,maintain,push'

outputs:
  approved:
    description: 'Indicates whether the comment received sufficient approvals'
    value: ${{ steps.wr.outputs.approved }}
  rejected:
    description: 'Indicates whether the comment received sufficient rejections'
    value: ${{ steps.wr.outputs.rejected }}
  approval-count:
    description: 'Number of approvals received'
    value: ${{ steps.wr.outputs.approval-count }}
  rejection-count:
    description: 'Number of rejections received'
    value: ${{ steps.wr.outputs.rejection-count }}
  timed-out:
    description: 'Indicates whether the approval process timed out'
    value: ${{ steps.wr.outputs.timed-out }}

runs:
  using: 'composite'
  steps:
    - name: Find Comment
      uses: peter-evans/find-comment@v2
      id: fc
      with:
        issue-number: ${{ inputs.issue-number }}
        comment-author: 'github-actions[bot]'
        body-includes: '<!-- comment-reaction-approval#${{ inputs.comment-id }} -->'

    - name: Delete Existing Comment
      if: steps.fc.outputs.comment-id != ''
      uses: actions/github-script@v7
      env:
        INPUT_COMMENT_ID: '${{ steps.fc.outputs.comment-id }}'
      with:
        script: |
          github.rest.issues.deleteComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            comment_id: core.getInput('comment_id', { required: true }),
          });

    - name: Create new comment
      id: cc
      uses: peter-evans/create-or-update-comment@v4
      with:
        issue-number: ${{ inputs.issue-number }}
        body: |
          ${{ inputs.comment-body }}

          <!-- comment-reaction-approval#${{ inputs.comment-id }} -->
        reactions: "+1,-1,eyes"

    - name: Wait for reaction
      id: wr
      uses: actions/github-script@v7
      env:
        INPUT_COMMENT_ID: '${{ steps.cc.outputs.comment-id }}'
        INPUT_REQUIRED_APPROVALS: '${{ inputs.required-approvals }}'
        INPUT_REQUIRED_REJECTIONS: '${{ inputs.required-rejections }}'
        INPUT_WAIT_TIMEOUT_SECONDS: '${{ inputs.wait-timeout-seconds }}'
        INPUT_CHECK_INTERVAL_SECONDS: '${{ inputs.check-interval-seconds }}'
        INPUT_AUTHORIZED_ROLES: '${{ inputs.authorized-roles }}'
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const commentId = core.getInput('comment_id', { required: true });
          const requiredApprovals = parseInt(core.getInput('required_approvals', { required: true }), 10);
          if (isNaN(requiredApprovals) || requiredApprovals <= 0) { core.error('required_approvals input should be a valid positive number.'); return; }
          const requiredRejections = parseInt(core.getInput('required_rejections', { required: true }), 10);
          if (isNaN(requiredRejections) || requiredRejections <= 0) { core.error('required_rejections input should be a valid positive number.'); return; }
          const waitTimeoutSeconds = parseInt(core.getInput('wait_timeout_seconds', { required: true }), 10);
          if (isNaN(waitTimeoutSeconds) || waitTimeoutSeconds <= 0) { core.error('wait_timeout_seconds input should be a valid positive number.'); return; }
          const checkIntervalSeconds = parseInt(core.getInput('check_interval_seconds', { required: true }), 10);
          if (isNaN(checkIntervalSeconds) || checkIntervalSeconds < 0) { core.error('check_interval_seconds input should be a valid number.'); return; }
          const authorizedRoles = core.getInput('authorized_roles', { required: true }).split(',').map(role => role.trim());
          if (authorizedRoles.length === 0) { core.error('authorized_roles input should have at least one item.'); return; }

          let timeLeftSeconds = waitTimeoutSeconds;
          let isPaused = false;
          const permissionsCache = {};

          try {
            const { data: collaborators } = await github.rest.repos.listCollaborators({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            while (timeLeftSeconds > 0) {
              const { data: reactions } = await github.rest.reactions.listForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: commentId,
              });

              const uniqueUsers = new Set(reactions.map(({ user: { login } }) => login));
              const userPermissions = Object.fromEntries(
                await Promise.all(Array.from(uniqueUsers).map(async (login) => {
                  if (permissionsCache[login]) {
                    return [login, permissionsCache[login]];
                  }
                  try {
                    const { data: { permission } } = await github.rest.repos.getCollaboratorPermissionLevel({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      username: login,
                    });
                    permissionsCache[login] = permission;
                    return [login, permission];
                  } catch {
                    permissionsCache[login] = "none";
                    return [login, "none"];
                  }
                }))
              );
              core.debug(`User permissions: ${JSON.stringify(userPermissions)}`);

              const authorizedUsersReactions = reactions.filter(({ user: { login } }) =>
                authorizedRoles.includes(userPermissions[login])
              );

              const approvals = authorizedUsersReactions.filter(reaction => reaction.content === '+1').length;
              const rejections = authorizedUsersReactions.filter(reaction => reaction.content === '-1').length;
              const pauses = authorizedUsersReactions.filter(reaction => reaction.content === 'eyes').length;

              core.info(`Status: ${approvals}/${requiredApprovals} approvals, ${rejections}/${requiredRejections} rejections`);

              if (rejections >= requiredRejections) {
                core.setOutput('approved', 'false');
                core.setOutput('rejected', 'true');
                core.setOutput('approval-count', `${approvals}`);
                core.setOutput('rejection-count', `${rejections}`);
                core.setOutput('timed-out', 'false');
                core.info('Rejection was given.');
                return;
              }

              if (approvals >= requiredApprovals) {
                core.setOutput('approved', 'true');
                core.setOutput('rejected', 'false');
                core.setOutput('approval-count', `${approvals}`);
                core.setOutput('rejection-count', `${rejections}`);
                core.setOutput('timed-out', 'false');
                core.info('Approval was given.');
                return;
              }

              isPaused = pauses > 0;

              core.info(`Time left before timeout: ${Math.floor(timeLeftSeconds / 60)}m ${Math.floor(timeLeftSeconds % 60)}s (${isPaused ? 'PAUSED' : 'RUNNING'})`);
              await new Promise(resolve => setTimeout(resolve, checkIntervalSeconds * 1000));
              if (!isPaused) timeLeftSeconds -= checkIntervalSeconds;
            }

            core.setOutput('approved', 'false');
            core.setOutput('rejected', 'false');
            core.setOutput('approval-count', '-1');
            core.setOutput('rejection-count', '-1');
            core.setOutput('timed-out', 'true');
            core.info('No reaction received within the timeout period.');
            return;

          } catch (error) {
            console.log(`Error: ${error.message}`);
            core.setOutput('approved', 'false');
            core.setOutput('rejected', 'false');
            core.setOutput('approval-count', '-1');
            core.setOutput('rejection-count', '-1');
            core.setOutput('timed-out', 'false');
            core.setFailed(error.message);
          }

    - name: Delete Existing Comment
      if: steps.cc.outputs.comment-id != '' && always()
      uses: actions/github-script@v7
      env:
        INPUT_COMMENT_ID: '${{ steps.cc.outputs.comment-id }}'
      with:
        script: |
          github.rest.issues.deleteComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            comment_id: core.getInput('comment_id', { required: true }),
          });
