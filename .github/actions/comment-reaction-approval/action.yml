name: 'Comment Reaction Approval'
description: 'Advanced comment approval workflow with flexible authorization and reaction handling'
inputs:
  github-token:
    description: 'GitHub token for API requests'
    required: true
  issue-number:
    description: 'GitHub issue or PR number'
    required: true
  comment-body:
    description: 'The body of the comment'
    required: false
    default: 'Please react with :+1: to approve, :-1: to reject, or :eyes: to pause timeout.'
  comment-id:
    description: 'A unique identifier for finding the comment'
    required: true
  wait-timeout-seconds:
    description: 'Time to wait for a reaction in seconds'
    required: false
    default: '1800'
  check-interval-seconds:
    description: 'Interval between reaction checks'
    required: false
    default: '30'
  required-approvals:
    description: 'Number of required approvals to mark as approved'
    required: false
    default: '1'
  required-rejections:
    description: 'Number of required rejections to mark as rejected'
    required: false
    default: '1'
  authorized-roles:
    description: 'Comma-separated list of allowed roles (admin,maintain,push,triage,pull)'
    required: false
    default: 'admin,maintain,push'

outputs:
  approved:
    description: 'Indicates whether the comment received sufficient approvals'
    value: ${{ steps.wr.outputs.approved }}
  rejected:
    description: 'Indicates whether the comment received sufficient rejections'
    value: ${{ steps.wr.outputs.rejected }}
  approval-count:
    description: 'Number of approvals received'
    value: ${{ steps.wr.outputs.approval-count }}
  rejection-count:
    description: 'Number of rejections received'
    value: ${{ steps.wr.outputs.rejection-count }}
  timed-out:
    description: 'Indicates whether the approval process timed out'
    value: ${{ steps.wr.outputs.timed-out }}

runs:
  using: 'composite'
  steps:
    - name: Find Comment
      uses: peter-evans/find-comment@v2
      id: fc
      with:
        issue-number: ${{ inputs.issue-number }}
        comment-author: 'github-actions[bot]'
        body-includes: '<!-- comment-reaction-approval#${{ inputs.comment-id }} -->'

    - name: Delete Existing Comment
      if: steps.fc.outputs.comment-id != ''
      uses: actions/github-script@v7
      env:
        INPUT_COMMENT_ID: '${{ steps.fc.outputs.comment-id }}'
      with:
        script: |
          github.rest.issues.deleteComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            comment_id: core.getInput('comment_id', { required: true }),
          });

    - name: Create new comment
      id: cc
      uses: peter-evans/create-or-update-comment@v4
      with:
        issue-number: ${{ inputs.issue-number }}
        body: |
          ${{ inputs.comment-body }}

          <!-- comment-reaction-approval#${{ inputs.comment-id }} -->
        reactions: "+1,-1,eyes"

    - name: Wait for reaction
      id: wr
      uses: actions/github-script@v7
      env:
        INPUT_COMMENT_ID: '${{ steps.cc.outputs.comment-id }}'
        INPUT_REQUIRED_APPROVALS: '${{ inputs.required-approvals }}'
        INPUT_REQUIRED_REJECTIONS: '${{ inputs.required-rejections }}'
        INPUT_WAIT_TIMEOUT_SECONDS: '${{ inputs.wait-timeout-seconds }}'
        INPUT_CHECK_INTERVAL_SECONDS: '${{ inputs.check-interval-seconds }}'
        INPUT_AUTHORIZED_ROLES: '${{ inputs.authorized-roles }}'
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const commentId = core.getInput('comment_id', { required: true });
          const requiredApprovals = parseInt(core.getInput('required_approvals', { required: true }), 10);
          const requiredRejections = parseInt(core.getInput('required_rejections', { required: true }), 10);
          const waitTimeoutSeconds = parseInt(core.getInput('wait_timeout_seconds', { required: true }), 10);
          const checkIntervalSeconds = parseInt(core.getInput('check_interval_seconds', { required: true }), 10);
          const authorizedRoles = core.getInput('authorized_roles', { required: true }).split(',');

          const endTime = Date.now() + (waitTimeoutSeconds * 1000);

          async function checkReactions() {
            try {
              const { data: collaborators } = await github.rest.repos.listCollaborators({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });

              const authorizedUsers = collaborators
                .filter(user =>
                  authorizedRoles.some(role =>
                    user.permissions[role.trim()] === true
                  )
                )
                .map(user => user.login);
              core.info(`Authorized users: ${JSON.stringify(authorizedUsers)}`)

              while (true) {
                const { data: reactions } = await github.rest.reactions.listForIssueComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: commentId,
                });

                const authorizedUsersReactions = reactions.filter(reaction => validUsers.includes(reaction.user.login));

                const approvals = authorizedUsersReactions.filter(reaction => reaction.content === '+1');
                const rejections = authorizedUsersReactions.filter(reaction => reaction.content === '-1');
                const pauses = authorizedUsersReactions.filter(reaction => reaction.content === 'eyes');

                core.debug(JSON.stringify(reactions))

                core.info(`Approvals: ${approvals.length}, Rejections: ${rejections.length}, Pauses: ${pauses.length}`);

                if (pauses.length > 0) {
                  core.info('Approval timeout pause is detected.');
                  await new Promise(resolve => setTimeout(resolve, checkIntervalSeconds * 1000));
                  continue;
                }
          
                if (Date.now() >= endTime) {
                  break;
                }

                if (rejections.length >= requiredRejections) {
                  core.setOutput('approved', 'false');
                  core.setOutput('rejected', 'true');
                  core.setOutput('approval-count', `${approvals.length}`);
                  core.setOutput('rejection-count', `${rejections.length}`);
                  core.setOutput('timed-out', 'false');
                  core.info('Rejection was given.');
                  return;
                }

                if (approvals.length >= requiredApprovals) {
                  core.setOutput('approved', 'true');
                  core.setOutput('rejected', 'false');
                  core.setOutput('approval-count', `${approvals.length}`);
                  core.setOutput('rejection-count', `${rejections.length}`);
                  core.setOutput('timed-out', 'false');
                  core.info('Approval was given.');
                  return;
                }

                await new Promise(resolve => setTimeout(resolve, checkIntervalSeconds * 1000));
              }

              core.setOutput('approved', 'false');
              core.setOutput('rejected', 'false');
              core.setOutput('approval-count', '-1');
              core.setOutput('rejection-count', '-1');
              core.setOutput('timed-out', 'true');
              core.info('No reaction received within the timeout period.');
              return;

            } catch (error) {
              console.log(`Error: ${error.message}`);
              core.setOutput('approved', 'false');
              core.setOutput('rejected', 'false');
              core.setOutput('approval-count', '-1');
              core.setOutput('rejection-count', '-1');
              core.setOutput('timed-out', 'false');
              core.setFailed(error.message);
            }
          }

          await checkReactions();

    - name: Delete Existing Comment
      if: steps.cc.outputs.comment-id != '' && always()
      uses: actions/github-script@v7
      env:
        INPUT_COMMENT_ID: '${{ steps.cc.outputs.comment-id }}'
      with:
        script: |
          github.rest.issues.deleteComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            comment_id: core.getInput('comment_id', { required: true }),
          });
